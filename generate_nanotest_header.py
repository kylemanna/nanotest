#!/usr/bin/env python3

import re
import sys
import argparse

class Test:
    def __init__(self, suite, name):
        self.suite = suite
        self.name = name

    def __str__(self):
        return "{}_{}".format(self.suite, self.name)


class Tests:
    def __init__(self, files = None):
        self.tests = []
        self.delimiter = '\n'

        if files:
            self.parse_files(files)

    def __str__(self):
        return self.delimiter.join(self.get_names())

    def parse_file(self, file):
        for line in file.readlines():
            # Strict matching to avoid any surprises
            m = re.match('^NANOTEST\((\w*),\s*(\w*)\)\s*({?)\s*$', line)

            if m:
                self.tests.append(Test(m.group(1), m.group(2)))
    
    def parse_files(self, file_list):
        if not isinstance(file_list, list):
            self.parse_file(file_list)

        elif isinstance(file_list[0], str):
            for filename in file_list:
                with open(filename, 'r') as file:
                    self.parse_files(file)

    def get_names(self):
        return [str(i) for i in self.tests]

    def gen_header(self):
        names = self.get_names()
        out = []
        out.append('/*')
        out.append(' * This file is autogenerated, don\'t modify!')
        out.append(' */')
        out.append('')
        out.append('#include "nanotest.h"')
        out.append('')

        for n in names:
            out.append('extern struct nanotest_unit test_{};'.format(n))

        out.append('\nstruct nanotest_unit* autogen_tests[] = {');

        for n in names:
            out.append('    &test_{},'.format(n))

        out.append('    NULL,')
        out.append('};');
        out.append('');

        return '\n'.join(out)

    def write_header(self, dest):
        with open(dest, 'w') if dest else sys.stdout as file:
            file.write(self.gen_header())

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("file_list", nargs="*", help="Source file to search")
    parser.add_argument("--output", help="Destination header file")
    args = parser.parse_args()

    tests = Tests(args.file_list)

    tests.write_header(args.output)
